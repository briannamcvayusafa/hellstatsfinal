[
  {
    "objectID": "eda.html",
    "href": "eda.html",
    "title": "EDA",
    "section": "",
    "text": "Code\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\nlibrary(parsnip)\nlibrary(discrim)\nlibrary(tidymodels)\n\n\n-- Attaching packages -------------------------------------- tidymodels 1.2.0 --\n\n\nv broom        1.0.5      v tibble       3.2.1 \nv dials        1.2.1      v tidyr        1.3.1 \nv infer        1.0.7      v tune         1.2.1 \nv modeldata    1.3.0      v workflows    1.1.4 \nv purrr        1.0.2      v workflowsets 1.1.0 \nv recipes      1.0.10     v yardstick    1.3.1 \nv rsample      1.2.1      \n\n\n-- Conflicts ----------------------------------------- tidymodels_conflicts() --\nx purrr::discard()    masks scales::discard()\nx dplyr::filter()     masks stats::filter()\nx dplyr::lag()        masks stats::lag()\nx dials::smoothness() masks discrim::smoothness()\nx recipes::step()     masks stats::step()\n* Dig deeper into tidy modeling with R at https://www.tmwr.org\n\n\nCode\ndf &lt;- palmerpenguins::penguins\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n      where(is.numeric), \n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n2008.055\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n2008.055\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n2007.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n2007.971\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n2007.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n2008.069\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n2008.066\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n2008.400"
  },
  {
    "objectID": "eda.html#penguin-size-and-mass-by-sex-and-species",
    "href": "eda.html#penguin-size-and-mass-by-sex-and-species",
    "title": "EDA",
    "section": "",
    "text": "Code\nlibrary(palmerpenguins)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(ggplot2)\nlibrary(parsnip)\nlibrary(discrim)\nlibrary(tidymodels)\n\n\n-- Attaching packages -------------------------------------- tidymodels 1.2.0 --\n\n\nv broom        1.0.5      v tibble       3.2.1 \nv dials        1.2.1      v tidyr        1.3.1 \nv infer        1.0.7      v tune         1.2.1 \nv modeldata    1.3.0      v workflows    1.1.4 \nv purrr        1.0.2      v workflowsets 1.1.0 \nv recipes      1.0.10     v yardstick    1.3.1 \nv rsample      1.2.1      \n\n\n-- Conflicts ----------------------------------------- tidymodels_conflicts() --\nx purrr::discard()    masks scales::discard()\nx dplyr::filter()     masks stats::filter()\nx dplyr::lag()        masks stats::lag()\nx dials::smoothness() masks discrim::smoothness()\nx recipes::step()     masks stats::step()\n* Dig deeper into tidy modeling with R at https://www.tmwr.org\n\n\nCode\ndf &lt;- palmerpenguins::penguins\n\n\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n      where(is.numeric), \n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  knitr::kable()\n\n\n`summarise()` has grouped output by 'species'. You can override using the\n`.groups` argument.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nspecies\nsex\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nyear\n\n\n\n\nAdelie\nfemale\n37.25753\n17.62192\n187.7945\n3368.836\n2008.055\n\n\nAdelie\nmale\n40.39041\n19.07260\n192.4110\n4043.493\n2008.055\n\n\nAdelie\nNA\n37.84000\n18.32000\n185.6000\n3540.000\n2007.000\n\n\nChinstrap\nfemale\n46.57353\n17.58824\n191.7353\n3527.206\n2007.971\n\n\nChinstrap\nmale\n51.09412\n19.25294\n199.9118\n3938.971\n2007.971\n\n\nGentoo\nfemale\n45.56379\n14.23793\n212.7069\n4679.741\n2008.069\n\n\nGentoo\nmale\n49.47377\n15.71803\n221.5410\n5484.836\n2008.066\n\n\nGentoo\nNA\n45.62500\n14.55000\n215.7500\n4587.500\n2008.400"
  },
  {
    "objectID": "eda.html#penguin-size-vs-mass-by-species",
    "href": "eda.html#penguin-size-vs-mass-by-species",
    "title": "EDA",
    "section": "Penguin Size vs Mass by Species",
    "text": "Penguin Size vs Mass by Species\nThis graph compares the average body mass of the penguins to their bill lengths. It can be seen that the species have pretty clear groups - for example, gentoo penguins seem to have higher body masses and bill lengths than adelle penguins.\n\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 2 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 2 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This project creates a model about penguins.\n\n\nCode\nfrom PIL import Image\nmyImage = Image.open(\"imgs/screaming_crying.jpg\");\nmyImage.show();\n\n\n\n\nCode\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\nfrom fastapi.staticfiles import StaticFiles\n \napp = FastAPI()\n \napp.mount(\"/imgs\", StaticFiles(directory=\"imgs\"), name='images')\n \n@app.get(\"/\", response_class=HTMLResponse)\ndef serve():\n    return \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n        &lt;img src=\"imgs/screaming_crying.png\"&gt;\n        &lt;h1&gt;FUCK&lt;/h1&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\""
  },
  {
    "objectID": "lab1.html",
    "href": "lab1.html",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ndf &lt;- palmerpenguins::penguins\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n      where(is.numeric), \n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  knitr::kable()"
  },
  {
    "objectID": "lab1.html#penguin-size-and-mass-by-sex-and-species",
    "href": "lab1.html#penguin-size-and-mass-by-sex-and-species",
    "title": "Penguins EDA",
    "section": "",
    "text": "Code\nlibrary(palmerpenguins)\nlibrary(dplyr)\nlibrary(ggplot2)\n\ndf &lt;- palmerpenguins::penguins\n\n\nCode\ndf %&gt;%\n  group_by(species, sex) %&gt;%\n  summarise(\n    across(\n      where(is.numeric), \n      \\(x) mean(x, na.rm = TRUE)\n      )\n    ) %&gt;%\n  knitr::kable()"
  },
  {
    "objectID": "lab1.html#penguin-size-vs-mass-by-species",
    "href": "lab1.html#penguin-size-vs-mass-by-species",
    "title": "Penguins EDA",
    "section": "Penguin Size vs Mass by Species",
    "text": "Penguin Size vs Mass by Species\n\nCode\ndf %&gt;%\n  ggplot(aes(x = bill_length_mm, y = body_mass_g, color = species)) +\n  geom_point() + \n  geom_smooth(method = \"lm\")"
  },
  {
    "objectID": "model.html",
    "href": "model.html",
    "title": "Model",
    "section": "",
    "text": "Code\nfrom palmerpenguins import penguins\nfrom pandas import get_dummies\nimport numpy as np\nfrom sklearn.linear_model import LinearRegression\nfrom sklearn import preprocessing"
  },
  {
    "objectID": "model.html#get-data",
    "href": "model.html#get-data",
    "title": "Model",
    "section": "Get Data",
    "text": "Get Data\nThis code imports the penguin data.\n\n\nCode\ndf = penguins.load_penguins().dropna()\n\ndf.head(3)\n\n\n\n\n\n\n\n\n\nspecies\nisland\nbill_length_mm\nbill_depth_mm\nflipper_length_mm\nbody_mass_g\nsex\nyear\n\n\n\n\n0\nAdelie\nTorgersen\n39.1\n18.7\n181.0\n3750.0\nmale\n2007\n\n\n1\nAdelie\nTorgersen\n39.5\n17.4\n186.0\n3800.0\nfemale\n2007\n\n\n2\nAdelie\nTorgersen\n40.3\n18.0\n195.0\n3250.0\nfemale\n2007"
  },
  {
    "objectID": "model.html#define-model-and-fit",
    "href": "model.html#define-model-and-fit",
    "title": "Model",
    "section": "Define Model and Fit",
    "text": "Define Model and Fit\nThis code creates the model that weâ€™re testing.\n\n\nCode\nX = get_dummies(df[['bill_length_mm', 'species', 'sex']], drop_first = True)\ny = df['body_mass_g']\n\nmodel = LinearRegression().fit(X, y)"
  },
  {
    "objectID": "model.html#get-some-information",
    "href": "model.html#get-some-information",
    "title": "Model",
    "section": "Get some information",
    "text": "Get some information\nThis code finds the R^2 error, the intercept of the model, the names of each column, and the coefficients of the model.\n\n\nCode\nprint(f\"R^2 {model.score(X,y)}\")\nprint(f\"Intercept {model.intercept_}\")\nprint(f\"Columns {X.columns}\")\nprint(f\"Coefficients {model.coef_}\")\n\n\nR^2 0.8555368759537614\nIntercept 2169.2697209393973\nColumns Index(['bill_length_mm', 'species_Chinstrap', 'species_Gentoo', 'sex_male'], dtype='object')\nCoefficients [  32.53688677 -298.76553447 1094.86739145  547.36692408]"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "McVayFinalProjectAgain",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n2"
  },
  {
    "objectID": "about.html#this-is-my-project",
    "href": "about.html#this-is-my-project",
    "title": "About",
    "section": "",
    "text": "This project creates a model about penguins.\n\n\nCode\nfrom PIL import Image\nmyImage = Image.open(\"imgs/screaming_crying.jpg\");\nmyImage.show();\n\n\n\n\nCode\nfrom fastapi import FastAPI\nfrom fastapi.responses import HTMLResponse\nfrom fastapi.staticfiles import StaticFiles\n \napp = FastAPI()\n \napp.mount(\"/imgs\", StaticFiles(directory=\"imgs\"), name='images')\n \n@app.get(\"/\", response_class=HTMLResponse)\ndef serve():\n    return \"\"\"\n    &lt;html&gt;\n        &lt;head&gt;\n            &lt;title&gt;&lt;/title&gt;\n        &lt;/head&gt;\n        &lt;body&gt;\n        &lt;img src=\"imgs/screaming_crying.png\"&gt;\n        &lt;h1&gt;FUCK&lt;/h1&gt;\n        &lt;/body&gt;\n    &lt;/html&gt;\n    \"\"\""
  },
  {
    "objectID": "eda.html#penguin-species-model-with-lda",
    "href": "eda.html#penguin-species-model-with-lda",
    "title": "EDA",
    "section": "Penguin Species Model with LDA",
    "text": "Penguin Species Model with LDA\nThis model seeks to predict penguin species by their bill length.\n\n\nCode\npenguin_split &lt;- initial_split(df, prop = 0.8)\npenguin_train &lt;- training(penguin_split)\npenguin_test &lt;- testing(penguin_split)\nlda_spec &lt;- discrim_linear() %&gt;%\n        set_mode(\"classification\") %&gt;%\n        set_engine(\"MASS\")\nlda_fit&lt;- lda_spec %&gt;%\n    fit(species~bill_length_mm, data = penguin_train)\nlda_fit_preds_test &lt;- augment(lda_fit , new_data = penguin_test) %&gt;%\n        select(species, bill_length_mm, .pred_class)\n\n\nWarning in FUN(newX[, i], ...): no non-missing arguments to min; returning Inf\nWarning in FUN(newX[, i], ...): no non-missing arguments to min; returning Inf\n\n\nCode\nlda_fit_preds_test %&gt;%\n  conf_mat(truth = species, estimate = .pred_class)\n\n\n           Truth\nPrediction  Adelie Chinstrap Gentoo\n  Adelie        26         1      6\n  Chinstrap      0         0      0\n  Gentoo         1        14     20\n\n\nCode\nlr_metrics &lt;- metric_set(accuracy, sensitivity, specificity, ppv)\nlda_fit_preds_test%&gt;%\n  lr_metrics(truth = species, estimate = .pred_class, event_level = \"second\")\n\n\n# A tibble: 4 x 3\n  .metric     .estimator .estimate\n  &lt;chr&gt;       &lt;chr&gt;          &lt;dbl&gt;\n1 accuracy    multiclass     0.676\n2 sensitivity macro          0.577\n3 specificity macro          0.824\n4 ppv         macro         NA    \n\n\nWe can see here that the model is not the best at predicting the penguinsâ€™ species. It has decent specificity, but not much else."
  },
  {
    "objectID": "model.html#vetiver",
    "href": "model.html#vetiver",
    "title": "Model",
    "section": "Vetiver",
    "text": "Vetiver\n\n\nCode\nfrom vetiver import VetiverModel\nv = VetiverModel(model, model_name='penguin_model', prototype_data=X)"
  },
  {
    "objectID": "model.html#fastapi",
    "href": "model.html#fastapi",
    "title": "Model",
    "section": "FastAPI",
    "text": "FastAPI\n\n\nCode\nimport pins\nfrom fastapi import FastAPI\nfrom vetiver import vetiver_pin_write\nb = pins.board_folder('data/model', allow_pickle_read=True)\nvetiver_pin_write(b, v)\n\nv = VetiverModel.from_pin(b, 'penguin_model')\nfrom vetiver import VetiverAPI\napp = VetiverAPI(v, check_prototype=True)\n\n\nModel Cards provide a framework for transparent, responsible reporting. \n Use the vetiver `.qmd` Quarto template as a place to start, \n with vetiver.model_card()\nWriting pin:\nName: 'penguin_model'\nVersion: 20240425T190012Z-82872"
  }
]